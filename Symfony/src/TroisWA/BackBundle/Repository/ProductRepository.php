<?php

namespace TroisWA\BackBundle\Repository;
use Symfony\Component\HttpFoundation\JsonResponse;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{

//    Appel de tous les produits


  public function findAllPerso()
  {

      //1ERE METHODE
//        $query=$this->getEntityManager()
//                    ->createQuery(
//
//        "SELECT prod
//         FROM TroisWABackBundle:Product prod"
//    );
//      return $query->getResult();

//}

//2EME METHODE

      $query = $this->createQueryBuilder("prod")
          ->getQuery();
      return $query->getResult();
  }




    public function findPerso($id)
    {

        //_em = raccourci de getEntityManager();

        //1ERE METHODE

//        $query=$this->_em->createQuery(
//
//            "SELECT prod
//            From TroisWABackBundle:Product prod
//            WHERE prod.id=:idProd ")
////             :idProd est la variable
//            ->setParameter("idProd",$id);
////            ecriture alternative
////            ->setParameters(["idProd"=>$id])
//
//
//        die(dump($query->getSingleResult()));
//            return $query->getSingleResult();

//2EME METHODE

        $query = $this->createQueryBuilder("prod")
            ->where ('prod.id = :idProd')
            ->setParameters(["idProd"=>$id])
            ->getQuery();

        return $query->getSingleResult();
    }

    public function findrso($id)
    {

        //_em = raccourci de getEntityManager();

        //1ERE METHODE

//        $query=$this->_em->createQuery(
//
//            "SELECT prod
//            From TroisWABackBundle:Product prod
//            WHERE prod.id=:idProd ")
////             :idProd est la variable
//            ->setParameter("idProd",$id);
////            ecriture alternative
////            ->setParameters(["idProd"=>$id])
//
//
//        die(dump($query->getSingleResult()));
//            return $query->getSingleResult();

//2EME METHODE

        $query = $this->createQueryBuilder("prod")
            ->where ('prod.id = :idProd')
            ->setParameters(["idProd"=>$id])
            ->getQuery();

        return $query->getSingleResult();
    }



    public function fiveQuantity($qty = 5)
    {


        $query = $this->createQueryBuilder("prod")
            ->where ('prod.quantity < :quantity')
            ->getQuery()
            ->setParameter("quantity",$qty);
        return $query->getResult();
    }

    public function noItems()
    {


        $query = $this->createQueryBuilder("prod")
            ->select('count(prod.id)')
            ->where ('prod.quantity = 0')
            ->getQuery();
        return $query->getSingleScalarResult();
    }

    public function sumPrice()
    {

        $query = $this->createQueryBuilder("prod")
            ->select('sum(prod.price)')
            ->getQuery();
        return $query->getSingleScalarResult();
    }

    public function countProduct()
    {

        $query = $this->createQueryBuilder("prod")
            ->select('count(prod.id)')
            ->getQuery();
        return $query->getSingleScalarResult();
    }

    public function price()
    {

        $query = $this->createQueryBuilder("prod")
            ->select('max(prod.price)','min(prod.price)')
            ->getQuery();
        return $query->getResult();
    }

//    JOINTURE
    public function findAllProductsWithCategories()
    {
//        $query=$this->getEntityManager()
//                    ->createQuery(
//                        "SELECT prod,cat
//                        FROM TroisWABackBundle:Product
//                        LEFT JOIN prod.category cat ");

        $query = $this->createQueryBuilder("prod")
            ->select('prod','cat')
            ->join('prod.category' , 'cat')
            ->getQuery();

//        die(dump($query->getResult()));

        return $query->getResult();


    }

    public function getProductCategoryAccueil()
    {

    $query= $this->createQueryBuilder("prod")
        ->join('prod.category','cat')
        ->where('cat.title = :title')
        ->setParameter('title',"Accueil")
        ->getQuery();

//        die(dump($query->getResult()));

        return $query->getResult();

    }

    public function getProductNoCat()
    {

        $query= $this->createQueryBuilder("prod")
            ->where('prod.category is null')
            ->getQuery();

//        die(dump($query->getResult()));

        return $query->getResult();

    }

    public function getProductNoCatBrand()
    {

        $query= $this->createQueryBuilder("prod")
            ->where('prod.category is null','prod.brand is not null')
            ->getQuery();

//        die(dump($query->getResult()));

        return $query->getResult();

    }

    public function getProdParCat()
    {

        $query= $this->createQueryBuilder("prod")
            ->select("COUNT(prod)","cat.title")
            ->join("prod.category","cat")
            ->groupBy("cat.id")
            ->getQuery();
        $result=$query->getResult();

//dump($result);
//        die();
        return $query->getResult();
//$table=[];
//
//        foreach($result as $res){
//
//           $table[]=array(
//               'label'=>$res['title'],
//               'data'=>$res['1']);
//
//        }
//
////        dump($table);
//
//            $json=new JsonResponse();
//
//            $json->setData(
//
//                $table
//            );
//
////        dump($json->getContent());
////        die();
//        return $json->getContent();

    }


    public function lastComments($id)
    {


        $query=$this->createQueryBuilder("prod")
            ->select('prod, coms, tags')
            ->leftJoin('prod.comments','coms')
            ->leftJoin('prod.tags','tags')
            ->where('prod.id = :id')
            ->setParameter('id',$id)
            ->orderBy('coms.dateCreated','desc')
            ->setMaxResults(5)
            ->getQuery();
//        die(dump ($query->getSingleResult()));

        return$query->getSingleResult();

    }

    public function findSixProducts()
    {
//
        $query = $this->createQueryBuilder("prod")
            ->setMaxResults(6)
            ->getQuery();

//                die(dump($query->getResult()));
        return $query->getResult();
    }

    public function findProducts($idsProduct)
    {

        $query = $this->createQueryBuilder("prod")
            ->select('prod, brands, cat, img')
            ->leftJoin('prod.brand','brands')
            ->leftJoin('prod.category','cat')
            ->leftJoin('prod.image','img')
            ->andWhere('prod.id IN (:ids)')
            ->setParameter('ids',$idsProduct)
            ->getQuery();


        //die(dump($query->getResult()));

            return $query->getResult();

    }

    public function latestProducts()
    {

        $query = $this->createQueryBuilder("prod")
            ->orderBy("prod.dateCreated","desc")
            ->setMaxResults(5)
            ->getQuery();


        //die(dump($query->getResult()));

        return $query->getResult();

    }





}