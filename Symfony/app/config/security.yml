# To get started with security, check out the documentation:
# http://symfony.com/doc/current/book/security.html
security:

  encoders:
    Symfony\Component\Security\Core\User\User: plaintext
#    TroisWA\BackBundle\Entity\User:
#        algorithm: sha512
#        encode_as_base64: true
#        iterations: 1000

    #autre type d'encodage
    TroisWA\BackBundle\Entity\User:
      algorithm: bcrypt
      #cost=nb de caracteres
      cost: 15


  # http://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers
# D'ou proviennent les utilisateurs
  providers:
    #les fichiers sont crees dans ce fichier
    in_memory:
      memory:
        users:
          #login
          admin:
            password: admin
            roles: ROLE_ADMIN #un role commence toujours par ROLE_
          test: { password: test, roles: ROLE_COMMERCIAL }
          gertrude: { password: azerty, roles: ROLE_SUPER_NANA }

    user_admin:
#      entity:
#        class: TroisWA\BackBundle\Entity\User
#        property: login

#      entity: { class: TroisWA\BackBundle\Entity\User, property: email } #connection avec l'email
      entity: { class: TroisWA\BackBundle\Entity\User } #connection sans property, il ira chercher l'information dans le repository

    mix:
      chain:
        provider: [in_memory, user_admin]




  role_hierarchy:
    # si j'essaye d'accéder à /product en tant que commercial sachant qu'un commercial peut y accéder
    # alors en tant qu'admin je pourrai également y accéder
    ROLE_SUPER_NANA: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
    ROLE_ADMIN: ROLE_COMMERCIAL


  #authentification
  firewalls:
    # disables authentication for assets and the profiler, adapt it according to your needs
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    #
    loginfirewall:
      pattern: ^/back/login$
      security: false


    #si je vais sur cette adresse je ne dois pas etre anonyme, pour se connecter -> form Login
    main:
      pattern: ^/back
      anonymous: false
      # activate different ways to authenticate

      #      http_basic:
      #        realm: "Zone sécurisé administration"
      #        provider: in_memory

      #provider: user_admin
      provider: mix



      switch_user:
        role: ROLE_SUPER_NANA
      #pour changer d'utilisateur il faut ajouter dans l'url ?_switch_user=admin
      #pour revenir à l'état normal il faut ajouter dans l'url ?_switch_user=_exit
        parameter: _changement_de_compte
      #?_changement_de_compte=admin

      #ou
      #switch_user: { role: ROLE_SUPER_NANA, parameter: _changement_de_compte }

      #permet la connection pour ne plus etre anonymous
      form_login:
        login_path: trois_wa_back_login
        check_path: trois_wa_back_login_check

        # spécifie l'url sur laquelle atterir si il n'y a rien en "mémoire"
        default_target_path: trois_wa_back_admin
        # oblige à rediriger sur le default_target_path
        always_use_default_target_path: false

      logout:
        path: trois_wa_back_logout
        target: /back/login

      remember_me:
        key: "%secret%"
        lifetime: 172800 #2 jours a definir en secondes
      # http_basic: ~
      # http://symfony.com/doc/current/book/security.html#a-configuring-how-your-users-will-authenticate

      # form_login: ~
      # http://symfony.com/doc/current/cookbook/security/form_login_setup.html

  #d'abord l'authentification puis l'authorisation
  #l'authorisation qui demande au moins le rôle commercial
  access_control:
    - { path: ^/back, role: ROLE_COMMERCIAL }